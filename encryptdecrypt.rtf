{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
#include <stdio.h>\
char* encrypt(char ch[500],int key)\{\uc0\u8232 \'a0\'a0 int n = strlen(ch);\u8232 \'a0\'a0 char res[501];\u8232 \'a0\'a0 for (int i = 0; i < n; i++)\{\u8232 \'a0\'a0 \'a0\'a0\'a0 int t;\u8232 \'a0\'a0 \'a0\'a0\'a0 if (ch[i] - 65 <= 26)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 t = ((ch[i]-65) + key) % 26 + 65;\u8232 \'a0\'a0 \'a0\'a0\'a0 else\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 t = ((ch[i]-97) + key) % 26 + 97;\u8232 \'a0\'a0 \'a0\'a0\'a0 res[i] = (char)t;\u8232 \'a0\'a0 \}\u8232 \'a0\'a0 res[n] = '\\0';\u8232 \'a0\'a0 return res;\u8232 \}\
char* decrypt(char ch[500],int key)\{\uc0\u8232 \'a0\'a0 int n = strlen(ch);\u8232 \'a0\'a0 char res[501];\u8232 \'a0\'a0 for (int i = 0; i < n; i++)\{\u8232 \'a0\'a0 \'a0\'a0\'a0 int t = ch[i] - key;\u8232 \'a0\'a0 \'a0\'a0\'a0 if (ch[i] - 65 <= 26)\{\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 if (t < 65)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 t += 26;\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 res[i] = (char)(t);\u8232 \'a0\'a0 \'a0\'a0\'a0 \}\u8232 \'a0\'a0 \'a0\'a0\'a0 else\{\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 if (t < 97)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 t += 26;\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 res[i] = (char)t;\u8232 \'a0\'a0 \'a0\'a0\'a0 \}\u8232 \'a0\'a0 \}\u8232 \'a0\'a0 res[n] = '\\0';\u8232 \'a0\'a0 return res;\'a0\'a0\u8232 \}\
int main()\{\uc0\u8232 \'a0\'a0 int n;\u8232 \'a0\'a0 while(1)\{\u8232 \'a0\'a0 \'a0\'a0\'a0 printf("%s\\n", "1. Encrypt ");\u8232 \'a0\'a0 \'a0\'a0\'a0 printf("%s\\n", "2. Decrypt");\u8232 \'a0\'a0 \'a0\'a0\'a0 printf("%s\\n", "3. Quit");\u8232 \'a0\'a0 \'a0\'a0\'a0 scanf("%d",&n);\u8232 \'a0\'a0 \'a0\'a0\'a0 if (n == 3)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 break;\u8232 \'a0\'a0 \'a0\'a0\'a0 int key;\u8232 \'a0\'a0 \'a0\'a0\'a0 printf("%s", "What is your key value(1-10)?\'a0\'a0 ");\u8232 \'a0\'a0 \'a0\'a0\'a0 scanf("%d",&key);\
\'a0\'a0 \'a0\'a0\'a0 char ch[500];\uc0\u8232 \'a0\'a0 \'a0\'a0\'a0 printf("%s ", "Enter your string: ");\u8232 \'a0\'a0 \'a0\'a0\'a0 scanf("%s",&ch);\u8232 \'a0\'a0 \'a0\'a0\'a0 if (n == 1)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 printf("Your encrypted string : %s\\n\\n",encrypt(ch,key));\u8232 \'a0\'a0 \'a0\'a0\'a0 else if (n == 2)\u8232 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 printf("Your decrypted string : %s\\n\\n",decrypt(ch,key));\u8232 \'a0\'a0 \}\u8232 \'a0\'a0 return 0;\u8232 \}}